{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\brkim\\\\frontend\\\\bookstore\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [id, setId] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirm, setConfirm] = useState('');\n  const [idError, setIdError] = useState('');\n  const [passwordError, setPasswordError] = useState('');\n  const [confirmError, setConfirmError] = useState('');\n  const [isIdCheck, setIsIdCheck] = useState(false); // 중복 검사를 했는지 안했는지\n  const [isIdAvailable, setIsIdAvailable] = useState(false); // 아이디 사용 가능한지 아닌지\n\n  const onChangeIdHandler = e => {\n    const idValue = e.target.value;\n    setId(idValue);\n    idCheckHandler(idValue);\n  };\n  const onChangePasswordHandler = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (name === 'password') {\n      setPassword(value);\n      passwordCheckHandler(value, confirm);\n    } else {\n      setConfirm(value);\n      passwordCheckHandler(password, value);\n    }\n  };\n  const idCheckHandler = async id => {\n    const idRegex = /^[a-z\\d]{5,10}$/;\n    if (id === '') {\n      setIdError('아이디를 입력해주세요.');\n      setIsIdAvailable(false);\n      return false;\n    } else if (!idRegex.test(id)) {\n      setIdError('아이디는 5~10자의 영소문자, 숫자만 입력 가능합니다.');\n      setIsIdAvailable(false);\n      return false;\n    }\n    try {\n      const responseData = await idDuplicateCheck(id);\n      if (responseData) {\n        setIdError('사용 가능한 아이디입니다.');\n        setIsIdCheck(true);\n        setIsIdAvailable(true);\n        return true;\n      } else {\n        setIdError('이미 사용중인 아이디입니다.');\n        setIsIdAvailable(false);\n        return false;\n      }\n    } catch (error) {\n      alert('서버 오류입니다. 관리자에게 문의하세요.');\n      console.error(error);\n      return false;\n    }\n  };\n  const passwordCheckHandler = (password, confirm) => {\n    const passwordRegex = /^[a-z\\d!@*&-_]{8,16}$/;\n    if (password === '') {\n      setPasswordError('비밀번호를 입력해주세요.');\n      return false;\n    } else if (!passwordRegex.test(password)) {\n      setPasswordError('비밀번호는 8~16자의 영소문자, 숫자, !@*&-_만 입력 가능합니다.');\n      return false;\n    } else if (confirm !== password) {\n      setPasswordError('');\n      setConfirmError('비밀번호가 일치하지 않습니다.');\n      return false;\n    } else {\n      setPasswordError('');\n      setConfirmError('');\n      return true;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Hello World\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"a/VsmvhyuKjQPfMinSgtpeAvBfE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","App","_s","id","setId","useState","password","setPassword","confirm","setConfirm","idError","setIdError","passwordError","setPasswordError","confirmError","setConfirmError","isIdCheck","setIsIdCheck","isIdAvailable","setIsIdAvailable","onChangeIdHandler","e","idValue","target","value","idCheckHandler","onChangePasswordHandler","name","passwordCheckHandler","idRegex","test","responseData","idDuplicateCheck","error","alert","console","passwordRegex","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/workspace/brkim/frontend/bookstore/src/App.js"],"sourcesContent":["import React from 'react';\n\nfunction App() {\n\n\n  const [id, setId] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirm, setConfirm] = useState('');\n  \n  const [idError, setIdError] = useState('');\n  const [passwordError, setPasswordError] = useState('');\n  const [confirmError, setConfirmError] = useState('');\n  \n  const [isIdCheck, setIsIdCheck] = useState(false); // 중복 검사를 했는지 안했는지\n  const [isIdAvailable, setIsIdAvailable] = useState(false); // 아이디 사용 가능한지 아닌지\n\n  const onChangeIdHandler = (e) => {\n    const idValue = e.target.value;\n    setId(idValue);\n    idCheckHandler(idValue);\n  }\n\n  const onChangePasswordHandler = (e) => {\n    const { name, value } = e.target;\n    if (name === 'password') {\n      setPassword(value);\n      passwordCheckHandler(value, confirm);\n    } else {\n      setConfirm(value);\n      passwordCheckHandler(password, value);\n    }\n  }\n\n  const idCheckHandler = async (id) => {\n    const idRegex = /^[a-z\\d]{5,10}$/;\n    if (id === '') {\n      setIdError('아이디를 입력해주세요.');\n      setIsIdAvailable(false);\n      return false;\n    } else if (!idRegex.test(id)) {\n      setIdError('아이디는 5~10자의 영소문자, 숫자만 입력 가능합니다.');\n      setIsIdAvailable(false);\n      return false;\n    }\n    try {\n      const responseData = await idDuplicateCheck(id);\n      if (responseData) {\n        setIdError('사용 가능한 아이디입니다.');\n        setIsIdCheck(true);\n        setIsIdAvailable(true);\n        return true;\n      } else {\n        setIdError('이미 사용중인 아이디입니다.');\n        setIsIdAvailable(false);\n        return false;\n      }\n    } catch (error) {\n      alert('서버 오류입니다. 관리자에게 문의하세요.');\n      console.error(error);\n      return false;\n    }\n  }\n\n  const passwordCheckHandler = (password, confirm) => {\n    const passwordRegex = /^[a-z\\d!@*&-_]{8,16}$/;\n    if (password === '') {\n      setPasswordError('비밀번호를 입력해주세요.');\n      return false;\n    } else if (!passwordRegex.test(password)) {\n      setPasswordError('비밀번호는 8~16자의 영소문자, 숫자, !@*&-_만 입력 가능합니다.');\n      return false;\n    } else if (confirm !== password) {\n      setPasswordError('');\n      setConfirmError('비밀번호가 일치하지 않습니다.');\n      return false;\n    } else {\n      setPasswordError('');\n      setConfirmError('');\n      return true;\n    }\n  }\n\n  \n  return (\n    <div>Hello World</div>\n\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}